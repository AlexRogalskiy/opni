apiVersion: nvidia.opni.io/v1
kind: ClusterPolicy
metadata:
  name: opni
  namespace: default
spec:
  daemonsets:
    priorityClassName: system-node-critical
    tolerations:
      - effect: NoSchedule
        key: nvidia.com/gpu
        operator: Exists
  dcgm:
    enabled: true
    hostPort: 5555
    image: dcgm
    imagePullPolicy: IfNotPresent
    repository: nvcr.io/nvidia/cloud-native
    version: 2.2.3-ubuntu20.04
  dcgmExporter:
    env:
      - name: DCGM_EXPORTER_LISTEN
        value: ":9400"
      - name: DCGM_EXPORTER_KUBERNETES
        value: "true"
      - name: DCGM_EXPORTER_COLLECTORS
        value: /etc/dcgm-exporter/dcp-metrics-included.csv
    image: dcgm-exporter
    imagePullPolicy: Always
    repository: nvcr.io/nvidia/k8s
    version: 2.2.9-2.4.0-ubuntu20.04
  devicePlugin:
    env:
      - name: PASS_DEVICE_SPECS
        value: "true"
      - name: FAIL_ON_INIT_ERROR
        value: "true"
      - name: DEVICE_LIST_STRATEGY
        value: envvar
      - name: DEVICE_ID_STRATEGY
        value: uuid
      - name: NVIDIA_VISIBLE_DEVICES
        value: all
      - name: NVIDIA_DRIVER_CAPABILITIES
        value: utility,compute
    image: k8s-device-plugin
    imagePullPolicy: Always
    repository: nvcr.io/nvidia
    securityContext:
      privileged: true
    version: v0.9.0-ubuntu20.04
  driver:
    enabled: true
    image: nvidia-vgpu-driver
    imagePullPolicy: Always
    licensingConfig:
      configMapName: licensing-config
      nlsEnabled: true
    manager:
      env:
        - name: ENABLE_AUTO_DRAIN
          value: "true"
        - name: DRAIN_USE_FORCE
          value: "false"
        - name: DRAIN_POD_SELECTOR_LABEL
          value: ""
        - name: DRAIN_TIMEOUT_SECONDS
          value: 0s
        - name: DRAIN_DELETE_EMPTYDIR_DATA
          value: "true"
      image: k8s-driver-manager
      imagePullPolicy: Always
      repository: nvcr.io/nvidia/cloud-native
      version: v0.1.0
    rdma:
      enabled: false
    repoConfig:
      configMapName: ""
      destinationDir: ""
    repository: your.registry.local
    securityContext:
      privileged: true
      seLinuxOptions:
        level: s0
    version: latest
    virtualTopology:
      config: ""
  gfd:
    env:
      - name: GFD_SLEEP_INTERVAL
        value: 60s
      - name: GFD_FAIL_ON_INIT_ERROR
        value: "true"
    image: gpu-feature-discovery
    imagePullPolicy: Always
    repository: nvcr.io/nvidia
    version: v0.4.1
  mig:
    strategy: none
  migManager:
    enabled: false
    repository: nvcr.io/nvidia/cloud-native
    image: k8s-mig-manager
    version: v0.1.2-ubuntu20.04
    imagePullPolicy: Always
    imagePullSecrets: []
    env:
      - name: WITH_REBOOT
        value: "false"
    securityContext:
      privileged: true
    resources: {}
  nodeStatusExporter:
    enabled: false
    image: gpu-operator-validator
    imagePullPolicy: Always
    repository: nvcr.io/nvidia/cloud-native
    version: v1.8.1
  operator:
    defaultRuntime: containerd
    initContainer:
      image: cuda
      imagePullPolicy: Always
      repository: nvcr.io/nvidia
      version: 11.2.1-base-ubuntu20.04
    runtimeClass: nvidia
  psp:
    enabled: false
  toolkit:
    enabled: true
    env:
      - name: CONTAINERD_CONFIG
        value: /var/lib/rancher/k3s/agent/etc/containerd/config.toml
      - name: CONTAINERD_SOCKET
        value: /run/k3s/containerd/containerd.sock
      - name: CONTAINERD_RUNTIME_CLASS
        value: nvidia
      - name: CONTAINERD_SET_AS_DEFAULT
        value: "false"
    image: container-toolkit
    imagePullPolicy: Always
    repository: nvcr.io/nvidia/k8s
    securityContext:
      privileged: true
      seLinuxOptions:
        level: s0
    version: 1.6.0
  validator:
    image: gpu-operator-validator
    imagePullPolicy: Always
    plugin:
      env:
        - name: WITH_WORKLOAD
          value: "true"
    repository: joekralicky
    securityContext:
      privileged: true
      seLinuxOptions:
        level: s0
    version: v1.8.1-ubuntu20.04
